pipeline {
    agent any

    environment {
        REGISTRY = "docker.io/miatrika05/ticklab"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DEPLOY_USER = "root"
        DEPLOY_HOST = "192.168.100.101"
        DEPLOY_PATH = "/var/www/ticklab"
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Checkout') {
            steps {
                    checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'git@github.com:miatrika/ticklab.git']]
        ])
            }
        }

        stage('Build (modular)') {
            steps {
                ansiColor('xterm') {
                    script {
                        load 'jenkins/stages/build.groovy'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                ansiColor('xterm') {
                    script {
                        load 'jenkins/stages/test.groovy'
                    }
                }
            }
        }

        stage('QA') {
            steps {
                ansiColor('xterm') {
                    script {
                        load 'jenkins/stages/qa.groovy'
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                ansiColor('xterm') {
                    script {
                        load 'jenkins/stages/security.groovy'
                    }
                }
            }
        }

        stage('Package & Push') {
            steps {
                ansiColor('xterm') {
                    script {
                        sh "docker build -t ${REGISTRY}:${IMAGE_TAG} ."
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                            sh 'echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin'
                            sh "docker tag ${REGISTRY}:${IMAGE_TAG} ${REGISTRY}:latest"
                            sh "docker push ${REGISTRY}:${IMAGE_TAG}"
                            sh "docker push ${REGISTRY}:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                ansiColor('xterm') {
                    script {
                        load 'jenkins/stages/deploy.groovy'
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully."
        }
        failure {
            echo "❌ Pipeline failed — check logs."
        }
        always {
            sh 'docker system prune -af || true'
        }
    }
}
